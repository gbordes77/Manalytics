#!/usr/bin/env python3

"""
Script de d√©monstration de Manalytics
Montre le fonctionnement du pipeline sans n√©cessiter de donn√©es r√©elles
"""

import asyncio
import json
import os
from datetime import datetime
import sys

# Ajouter le dossier courant au PYTHONPATH
sys.path.append('.')

from src.python.classifier.archetype_engine import ArchetypeEngine

def create_sample_tournament_data():
    """Cr√©er des donn√©es d'exemple pour la d√©monstration"""
    return {
        "tournament": {
            "id": "demo_tournament_001",
            "name": "Demo Modern Tournament",
            "date": "2025-01-15T10:00:00Z",
            "format": "Modern",
            "source": "demo",
            "url": "https://example.com/tournament/demo_001"
        },
        "decks": [
            {
                "player": "Alice",
                "rank": 1,
                "wins": 4,
                "losses": 0,
                "mainboard": [
                    {"name": "Lightning Bolt", "count": 4, "set": "M21", "number": "148"},
                    {"name": "Monastery Swiftspear", "count": 4, "set": "KTK", "number": "118"},
                    {"name": "Lava Spike", "count": 4, "set": "CHK", "number": "166"},
                    {"name": "Rift Bolt", "count": 4, "set": "TSP", "number": "176"},
                    {"name": "Mountain", "count": 20, "set": "UNH", "number": "139"}
                ],
                "sideboard": [
                    {"name": "Destructive Revelry", "count": 3, "set": "THS", "number": "192"},
                    {"name": "Smash to Smithereens", "count": 2, "set": "SOM", "number": "107"}
                ]
            },
            {
                "player": "Bob",
                "rank": 2,
                "wins": 3,
                "losses": 1,
                "mainboard": [
                    {"name": "Snapcaster Mage", "count": 4, "set": "ISD", "number": "78"},
                    {"name": "Lightning Bolt", "count": 4, "set": "M21", "number": "148"},
                    {"name": "Counterspell", "count": 4, "set": "M21", "number": "267"},
                    {"name": "Island", "count": 12, "set": "UNH", "number": "137"},
                    {"name": "Mountain", "count": 8, "set": "UNH", "number": "139"}
                ],
                "sideboard": [
                    {"name": "Negate", "count": 3, "set": "M21", "number": "56"},
                    {"name": "Pyroclasm", "count": 2, "set": "M10", "number": "153"}
                ]
            },
            {
                "player": "Charlie",
                "rank": 3,
                "wins": 3,
                "losses": 1,
                "mainboard": [
                    {"name": "Tarmogoyf", "count": 4, "set": "FUT", "number": "153"},
                    {"name": "Lightning Bolt", "count": 4, "set": "M21", "number": "148"},
                    {"name": "Dark Confidant", "count": 3, "set": "RAV", "number": "81"},
                    {"name": "Forest", "count": 8, "set": "UNH", "number": "140"},
                    {"name": "Swamp", "count": 6, "set": "UNH", "number": "138"},
                    {"name": "Mountain", "count": 4, "set": "UNH", "number": "139"}
                ],
                "sideboard": [
                    {"name": "Abrupt Decay", "count": 3, "set": "RTR", "number": "141"},
                    {"name": "Surgical Extraction", "count": 2, "set": "NPH", "number": "74"}
                ]
            }
        ],
        "standings": [
            {"player": "Alice", "rank": 1, "wins": 4, "losses": 0},
            {"player": "Bob", "rank": 2, "wins": 3, "losses": 1},
            {"player": "Charlie", "rank": 3, "wins": 3, "losses": 1}
        ]
    }

def create_sample_metagame_analysis():
    """Cr√©er une analyse de m√©tagame d'exemple"""
    return {
        "metadata": {
            "generated_at": datetime.now().isoformat() + "Z",
            "total_decks": 3,
            "total_tournaments": 1,
            "date_range": {
                "start": "2025-01-15",
                "end": "2025-01-15"
            },
            "formats": ["Modern"],
            "sources": ["demo"],
            "analysis_parameters": {
                "min_matches_for_matchup": 10,
                "min_decks_for_archetype": 1
            }
        },
        "archetype_performance": [
            {
                "archetype": "Burn",
                "deck_count": 1,
                "win_rate": 1.0,
                "meta_share": 0.33,
                "tournaments_appeared": 1
            },
            {
                "archetype": "Control",
                "deck_count": 1,
                "win_rate": 0.75,
                "meta_share": 0.33,
                "tournaments_appeared": 1
            },
            {
                "archetype": "Midrange",
                "deck_count": 1,
                "win_rate": 0.75,
                "meta_share": 0.33,
                "tournaments_appeared": 1
            }
        ],
        "temporal_trends": {
            "trend_summary": [
                {
                    "archetype": "Burn",
                    "avg_meta_share": 0.33,
                    "meta_share_trend": 0.0,
                    "avg_win_rate": 1.0,
                    "win_rate_trend": 0.0
                }
            ]
        },
        "source_statistics": [
            {
                "tournament_source": "demo",
                "tournament_count": 1,
                "deck_count": 3,
                "avg_win_rate": 0.83,
                "archetype_diversity": 3
            }
        ]
    }

async def demo_scraper():
    """D√©monstration du module de scraping"""
    print("üï∑Ô∏è  D√©monstration du module de scraping")
    print("="*50)
    
    # Simuler des donn√©es scrap√©es
    tournament_data = create_sample_tournament_data()
    
    print(f"‚úÖ Tournoi scrap√©: {tournament_data['tournament']['name']}")
    print(f"   Format: {tournament_data['tournament']['format']}")
    print(f"   Nombre de decks: {len(tournament_data['decks'])}")
    print(f"   Source: {tournament_data['tournament']['source']}")
    
    # Sauvegarder dans le dossier raw
    os.makedirs("data/raw/demo/2025/01/15", exist_ok=True)
    with open("data/raw/demo/2025/01/15/tournament_demo_001.json", "w") as f:
        json.dump(tournament_data, f, indent=2)
    
    print("   üíæ Donn√©es sauvegard√©es dans data/raw/demo/")
    return tournament_data

async def demo_classifier():
    """D√©monstration du module de classification"""
    print("\nüéØ D√©monstration du module de classification")
    print("="*50)
    
    # Charger les donn√©es du scraper
    with open("data/raw/demo/2025/01/15/tournament_demo_001.json", "r") as f:
        tournament_data = json.load(f)
    
    # Initialiser le moteur de classification
    engine = ArchetypeEngine("MTGOFormatData")
    
    # Charger les donn√©es Modern
    if engine.load_format_data("Modern"):
        print("‚úÖ R√®gles d'arch√©types Modern charg√©es")
        
        # Classifier chaque deck
        for deck in tournament_data["decks"]:
            archetype = engine.classify_deck(deck, "Modern")
            deck["archetype"] = archetype
            print(f"   üîç {deck['player']}: {archetype}")
    else:
        print("‚ö†Ô∏è  Impossible de charger les r√®gles Modern, utilisation d'arch√©types g√©n√©riques")
        # Classification basique bas√©e sur les cartes cl√©s
        for deck in tournament_data["decks"]:
            mainboard_cards = [card["name"] for card in deck["mainboard"]]
            
            if "Lightning Bolt" in mainboard_cards and "Monastery Swiftspear" in mainboard_cards:
                archetype = "Burn"
            elif "Snapcaster Mage" in mainboard_cards and "Counterspell" in mainboard_cards:
                archetype = "Control"
            elif "Tarmogoyf" in mainboard_cards and "Dark Confidant" in mainboard_cards:
                archetype = "Midrange"
            else:
                archetype = "Unknown"
            
            deck["archetype"] = archetype
            print(f"   üîç {deck['player']}: {archetype}")
    
    # Sauvegarder les donn√©es classifi√©es
    os.makedirs("data/processed/demo/2025/01/15", exist_ok=True)
    with open("data/processed/demo/2025/01/15/tournament_demo_001.json", "w") as f:
        json.dump(tournament_data, f, indent=2)
    
    print("   üíæ Donn√©es classifi√©es sauvegard√©es dans data/processed/demo/")
    return tournament_data

async def demo_analysis():
    """D√©monstration de l'analyse (version Python simplifi√©e)"""
    print("\nüìä D√©monstration de l'analyse de m√©tagame")
    print("="*50)
    
    # Cr√©er une analyse d'exemple
    analysis = create_sample_metagame_analysis()
    
    print("‚úÖ Analyse de m√©tagame g√©n√©r√©e:")
    print(f"   Total decks analys√©s: {analysis['metadata']['total_decks']}")
    print(f"   Arch√©types identifi√©s: {len(analysis['archetype_performance'])}")
    
    print("\nüìà Performance par arch√©type:")
    for archetype in analysis['archetype_performance']:
        print(f"   ‚Ä¢ {archetype['archetype']}: {archetype['win_rate']:.1%} winrate, {archetype['meta_share']:.1%} meta share")
    
    # Sauvegarder l'analyse
    os.makedirs("data/output", exist_ok=True)
    output_file = "data/output/metagame_Modern_demo.json"
    with open(output_file, "w") as f:
        json.dump(analysis, f, indent=2)
    
    print(f"   üíæ Analyse sauvegard√©e: {output_file}")
    return analysis

async def main():
    """Fonction principale de d√©monstration"""
    print("üßô‚Äç‚ôÇÔ∏è D√âMONSTRATION MANALYTICS")
    print("="*60)
    print("Cette d√©monstration montre le fonctionnement du pipeline")
    print("avec des donn√©es d'exemple, sans n√©cessiter de scraping r√©el.\n")
    
    try:
        # Phase 1: Scraping (simul√©)
        await demo_scraper()
        
        # Phase 2: Classification
        await demo_classifier()
        
        # Phase 3: Analyse (simplifi√©e)
        await demo_analysis()
        
        print("\nüéâ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!")
        print("="*60)
        print("Le pipeline Manalytics fonctionne correctement.")
        print("\nFichiers g√©n√©r√©s:")
        print("‚Ä¢ data/raw/demo/2025/01/15/tournament_demo_001.json")
        print("‚Ä¢ data/processed/demo/2025/01/15/tournament_demo_001.json")
        print("‚Ä¢ data/output/metagame_Modern_demo.json")
        
        print("\nPour utiliser avec de vraies donn√©es:")
        print("python orchestrator.py --format Modern --start-date 2025-01-01")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 