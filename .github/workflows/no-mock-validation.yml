name: No Mock Data Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-no-mock-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set environment variables
      run: |
        echo "NO_MOCK_DATA=true" >> $GITHUB_ENV
        echo "REJECT_MOCK_DATA=true" >> $GITHUB_ENV
        echo "REQUIRE_REAL_SOURCES=true" >> $GITHUB_ENV
    
    - name: Create scripts directory
      run: mkdir -p scripts
    
    - name: Check for mock data in codebase
      run: |
        echo "🔍 Scanning for mock data patterns..."
        python scripts/check_no_mocks.py
    
    - name: Validate specific patterns
      run: |
        echo "🔍 Checking for forbidden patterns..."
        
        # Check for mock imports
        if grep -r "from unittest.mock import\|import unittest.mock\|from mock import\|import mock\b" src/ tests/ --include="*.py"; then
          echo "❌ Mock imports detected!"
          exit 1
        fi
        
        # Check for mock usage patterns
        if grep -r "@mock\.\|@patch\|Mock()\|MagicMock()" src/ tests/ --include="*.py"; then
          echo "❌ Mock usage detected!"
          exit 1
        fi
        
        # Check for test data patterns
        if grep -r "Player[0-9]\|Deck[0-9]\|Card[0-9]\|test_data\|mock_data" src/ tests/ --include="*.py" --include="*.json"; then
          echo "❌ Test/mock data patterns detected!"
          exit 1
        fi
        
        echo "✅ No forbidden patterns found"
    
    - name: Validate real data availability
      run: |
        echo "📊 Checking for real data availability..."
        
        # Check if MTGODecklistCache exists
        if [ -d "MTGODecklistCache/Tournaments" ]; then
          tournament_count=$(find MTGODecklistCache/Tournaments -name "*.json" | wc -l)
          echo "✅ Found $tournament_count tournament files in MTGODecklistCache"
        else
          echo "⚠️  MTGODecklistCache not found"
        fi
        
        # Check if data directory has real data
        if [ -d "data" ]; then
          data_count=$(find data -name "*.json" | wc -l)
          echo "✅ Found $data_count data files in data directory"
        else
          echo "⚠️  Data directory not found"
        fi
        
        # Ensure we have some real data for tests
        total_files=$((tournament_count + data_count))
        if [ $total_files -lt 1 ]; then
          echo "❌ No real data files found! Tests require real tournament data."
          echo "📋 Please ensure MTGODecklistCache or data directory contains real tournament JSON files"
          exit 1
        fi
        
        echo "✅ Real data validation passed ($total_files files found)"
    
    - name: Run tests with real data only
      run: |
        echo "🧪 Running tests with real data validation..."
        
        # Set strict mode
        export NO_MOCK_DATA=true
        export PYTHONPATH=$PWD:$PYTHONPATH
        
        # Run tests with real data validation
        python -m pytest tests/ -v --tb=short --disable-warnings \
          --maxfail=5 \
          -k "not mock and not fake and not dummy"
    
    - name: Validate configuration files
      run: |
        echo "⚙️  Validating configuration files..."
        
        # Check that config files don't contain mock settings
        if grep -r "mock\|fake\|dummy\|test_data" config*.yaml config*.yml *.yaml *.yml 2>/dev/null; then
          echo "❌ Mock data found in configuration files!"
          exit 1
        fi
        
        echo "✅ Configuration files validated"
    
    - name: Check documentation compliance
      run: |
        echo "📚 Checking documentation compliance..."
        
        # Ensure README mentions real data policy
        if ! grep -q "real data\|no mock\|MTGODecklistCache" README*.md; then
          echo "⚠️  README should mention real data policy"
        fi
        
        # Check for policy documentation
        if [ -f "config/no_mock_policy.py" ]; then
          echo "✅ No mock policy found"
        else
          echo "❌ No mock policy file missing!"
          exit 1
        fi
        
        echo "✅ Documentation compliance validated"
    
    - name: Generate validation report
      if: always()
      run: |
        echo "📊 VALIDATION REPORT" > validation_report.txt
        echo "===================" >> validation_report.txt
        echo "" >> validation_report.txt
        echo "Date: $(date)" >> validation_report.txt
        echo "Commit: $GITHUB_SHA" >> validation_report.txt
        echo "Branch: $GITHUB_REF_NAME" >> validation_report.txt
        echo "" >> validation_report.txt
        
        # Count files by type
        echo "📁 FILE COUNTS:" >> validation_report.txt
        echo "Python files: $(find . -name "*.py" | grep -v venv | wc -l)" >> validation_report.txt
        echo "JSON files: $(find . -name "*.json" | grep -v venv | wc -l)" >> validation_report.txt
        echo "Test files: $(find tests/ -name "*.py" | wc -l)" >> validation_report.txt
        echo "" >> validation_report.txt
        
        # Real data statistics
        echo "📊 REAL DATA STATISTICS:" >> validation_report.txt
        if [ -d "MTGODecklistCache/Tournaments" ]; then
          echo "MTGODecklistCache tournaments: $(find MTGODecklistCache/Tournaments -name "*.json" | wc -l)" >> validation_report.txt
        fi
        if [ -d "data" ]; then
          echo "Data directory files: $(find data -name "*.json" | wc -l)" >> validation_report.txt
        fi
        echo "" >> validation_report.txt
        
        echo "✅ VALIDATION STATUS: NO MOCK DATA DETECTED" >> validation_report.txt
        
        cat validation_report.txt
    
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: no-mock-validation-report
        path: validation_report.txt

  # Job séparé pour valider les PR
  validate-pr-changes:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Check changed files for mock data
      run: |
        echo "🔍 Checking PR changes for mock data..."
        
        # Get list of changed files
        changed_files=$(git diff --name-only origin/main...HEAD)
        
        echo "📁 Changed files:"
        echo "$changed_files"
        echo ""
        
        # Check each changed file
        for file in $changed_files; do
          if [[ "$file" == *.py ]] || [[ "$file" == *.json ]]; then
            echo "🔍 Checking $file..."
            
            # Check for mock patterns in the file
            if grep -E "mock|fake|dummy|test_data|Player[0-9]|Deck[0-9]|Card[0-9]" "$file" 2>/dev/null; then
              echo "❌ Mock data found in $file"
              echo "📋 This PR introduces forbidden mock data patterns"
              exit 1
            fi
          fi
        done
        
        echo "✅ No mock data found in PR changes"
    
    - name: Validate PR title and description
      run: |
        echo "📝 Validating PR title and description..."
        
        # Check if PR mentions mock data (should be removing, not adding)
        if echo "${{ github.event.pull_request.title }}" | grep -i "mock\|fake\|dummy"; then
          echo "⚠️  PR title mentions mock data - ensure it's about removal"
        fi
        
        # Check if PR description explains real data usage
        if echo "${{ github.event.pull_request.body }}" | grep -i "real data\|no mock"; then
          echo "✅ PR mentions real data policy compliance"
        fi
        
        echo "✅ PR validation completed" 