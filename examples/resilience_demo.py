#!/usr/bin/env python3
"""
D√©monstration du syst√®me de r√©silience Manalytics.
Montre l'utilisation du Circuit Breaker, Retry Handler et Error Monitor.
"""

import asyncio
import random
import time
import sys
import os

# Ajouter le chemin vers le module
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src', 'python'))

from resilience import CircuitBreaker, RetryHandler, ErrorMonitor
from resilience.decorators import resilient
from resilience.retry_handler import RetryStrategy


class DemoNetworkService:
    """Service de d√©monstration simulant des appels r√©seau instables"""
    
    def __init__(self, failure_rate: float = 0.3):
        self.failure_rate = failure_rate
        self.call_count = 0
        
    async def unstable_call(self, operation: str = "test") -> str:
        """Simule un appel r√©seau instable"""
        self.call_count += 1
        
        # Simuler un d√©lai r√©seau
        await asyncio.sleep(random.uniform(0.1, 0.5))
        
        # √âchouer selon le taux configur√©
        if random.random() < self.failure_rate:
            raise ConnectionError(f"Network error on {operation} (call #{self.call_count})")
        
        return f"Success: {operation} completed (call #{self.call_count})"


async def demo_circuit_breaker():
    """D√©monstration du Circuit Breaker"""
    print("\nüîß === D√âMONSTRATION CIRCUIT BREAKER ===")
    
    service = DemoNetworkService(failure_rate=0.7)  # 70% d'√©chec
    cb = CircuitBreaker(
        failure_threshold=3,
        recovery_timeout=2,
        name="DemoCircuitBreaker"
    )
    
    print(f"Configuration: seuil={cb.failure_threshold}, timeout={cb.recovery_timeout}s")
    
    # Phase 1: D√©clencher l'ouverture du circuit
    print("\nüìà Phase 1: Accumulation d'√©checs...")
    for i in range(5):
        try:
            result = await cb.call(service.unstable_call, f"operation_{i}")
            print(f"  ‚úÖ {result}")
        except Exception as e:
            print(f"  ‚ùå √âchec {i+1}: {e}")
            
        stats = cb.get_stats()
        print(f"  üìä √âtat: {stats['state']}, √âchecs: {stats['failure_count']}/{stats['failure_threshold']}")
        
        await asyncio.sleep(0.5)
    
    # Phase 2: Circuit ouvert
    print("\nüö´ Phase 2: Circuit ouvert...")
    try:
        await cb.call(service.unstable_call, "blocked_operation")
    except Exception as e:
        print(f"  ‚ùå Requ√™te bloqu√©e: {e}")
    
    # Phase 3: R√©cup√©ration
    print(f"\n‚è≥ Phase 3: Attente de r√©cup√©ration ({cb.recovery_timeout}s)...")
    await asyncio.sleep(cb.recovery_timeout + 0.5)
    
    # Utiliser un service plus stable pour la r√©cup√©ration
    stable_service = DemoNetworkService(failure_rate=0.1)
    try:
        result = await cb.call(stable_service.unstable_call, "recovery_test")
        print(f"  ‚úÖ R√©cup√©ration r√©ussie: {result}")
    except Exception as e:
        print(f"  ‚ùå R√©cup√©ration √©chou√©e: {e}")
    
    print(f"\nüìä Statistiques finales:")
    stats = cb.get_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")


async def demo_retry_handler():
    """D√©monstration du Retry Handler"""
    print("\nüîÑ === D√âMONSTRATION RETRY HANDLER ===")
    
    service = DemoNetworkService(failure_rate=0.6)  # 60% d'√©chec
    rh = RetryHandler(
        max_attempts=4,
        base_delay=0.5,
        strategy=RetryStrategy.EXPONENTIAL_JITTER,
        name="DemoRetryHandler"
    )
    
    print(f"Configuration: max_attempts={rh.max_attempts}, strat√©gie={rh.strategy.value}")
    
    # Test avec succ√®s apr√®s retry
    print("\nüìà Test avec succ√®s apr√®s retry...")
    try:
        result = await rh.call(service.unstable_call, "retry_test")
        print(f"  ‚úÖ Succ√®s: {result}")
    except Exception as e:
        print(f"  ‚ùå √âchec final: {e}")
    
    # Test avec √©chec complet
    print("\nüìà Test avec service tr√®s instable...")
    unstable_service = DemoNetworkService(failure_rate=0.9)
    try:
        result = await rh.call(unstable_service.unstable_call, "failing_test")
        print(f"  ‚úÖ Succ√®s inattendu: {result}")
    except Exception as e:
        print(f"  ‚ùå √âchec apr√®s tous les retry: {e}")
    
    print(f"\nüìä Statistiques finales:")
    stats = rh.get_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")


async def demo_error_monitor():
    """D√©monstration de l'Error Monitor"""
    print("\nüìä === D√âMONSTRATION ERROR MONITOR ===")
    
    em = ErrorMonitor(
        error_rate_threshold=2.0,  # 2 erreurs par minute
        burst_threshold=3,
        name="DemoErrorMonitor"
    )
    
    # Callback d'alerte
    alerts = []
    def alert_callback(alert_data):
        alerts.append(alert_data)
        print(f"  üö® ALERTE: {alert_data['alert_type']} - {alert_data['message']}")
    
    em.add_alert_callback(alert_callback)
    
    print("Configuration: seuil=2 erreurs/min, burst=3 erreurs")
    
    # Simuler des erreurs
    print("\nüìà Simulation d'erreurs...")
    service = DemoNetworkService(failure_rate=0.8)
    
    for i in range(6):
        try:
            await service.unstable_call(f"monitored_op_{i}")
        except Exception as e:
            em.record_error(e, "demo_service", context={'operation_id': i})
            print(f"  ‚ùå Erreur {i+1} enregistr√©e: {type(e).__name__}")
        
        await asyncio.sleep(0.2)
    
    # Afficher les statistiques
    print(f"\nüìä Statistiques d'erreurs:")
    stats = em.get_component_stats("demo_service")
    if stats:
        print(f"  Erreurs totales: {stats.total_errors}")
        print(f"  Taux d'erreur: {stats.error_rate:.2f} erreurs/min")
        print(f"  Erreur la plus fr√©quente: {stats.most_common_error}")
    
    print(f"\nüö® Alertes d√©clench√©es: {len(alerts)}")
    for alert in alerts:
        print(f"  - {alert['alert_type']}: {alert['message']}")


@resilient(
    failure_threshold=2,
    max_attempts=3,
    retry_strategy="exponential_jitter",
    component="demo_api"
)
async def demo_resilient_function():
    """Fonction de d√©monstration avec r√©silience int√©gr√©e"""
    service = DemoNetworkService(failure_rate=0.5)
    return await service.unstable_call("resilient_operation")


async def demo_resilient_decorator():
    """D√©monstration du d√©corateur resilient"""
    print("\nüõ°Ô∏è === D√âMONSTRATION D√âCORATEUR RESILIENT ===")
    
    print("Test d'une fonction avec r√©silience int√©gr√©e...")
    
    try:
        result = await demo_resilient_function()
        print(f"  ‚úÖ Succ√®s: {result}")
    except Exception as e:
        print(f"  ‚ùå √âchec final: {e}")
    
    # Acc√©der aux statistiques
    if hasattr(demo_resilient_function, '_resilience_stats'):
        print(f"\nüìä Statistiques de r√©silience:")
        stats = demo_resilient_function._resilience_stats()
        
        cb_stats = stats.get('circuit_breaker', {})
        print(f"  Circuit Breaker: {cb_stats.get('state', 'N/A')} ({cb_stats.get('total_requests', 0)} requ√™tes)")
        
        retry_stats = stats.get('retry_handler', {})
        print(f"  Retry Handler: {retry_stats.get('success_rate', 0):.2f} taux de succ√®s")
        
        error_stats = stats.get('error_monitor', {})
        if error_stats:
            print(f"  Error Monitor: {error_stats.get('total_events', 0)} √©v√©nements")


async def demo_integration():
    """D√©monstration d'int√©gration compl√®te"""
    print("\nüîó === D√âMONSTRATION INT√âGRATION COMPL√àTE ===")
    
    # Cr√©er un service tr√®s instable
    service = DemoNetworkService(failure_rate=0.8)
    
    # Cr√©er les composants de r√©silience
    cb = CircuitBreaker(failure_threshold=2, recovery_timeout=1, name="IntegrationCB")
    rh = RetryHandler(max_attempts=3, base_delay=0.2, name="IntegrationRetry")
    em = ErrorMonitor(error_rate_threshold=1.0, name="IntegrationMonitor")
    
    # Callback d'alerte
    def alert_callback(alert_data):
        print(f"    üö® {alert_data['alert_type']}: {alert_data['message']}")
    
    em.add_alert_callback(alert_callback)
    
    print("Test d'int√©gration avec tous les composants...")
    
    for i in range(5):
        try:
            # Appliquer circuit breaker, retry et monitoring
            async def resilient_call():
                return await cb.call(service.unstable_call, f"integration_test_{i}")
            
            result = await rh.call(resilient_call)
            print(f"  ‚úÖ Test {i+1}: {result}")
            
        except Exception as e:
            em.record_error(e, "integration_test")
            print(f"  ‚ùå Test {i+1}: {e}")
        
        await asyncio.sleep(0.3)
    
    # R√©sum√© final
    print(f"\nüìä R√©sum√© d'int√©gration:")
    print(f"  Circuit Breaker: {cb.get_stats()['state']} ({cb.get_stats()['total_requests']} requ√™tes)")
    print(f"  Retry Handler: {rh.get_stats()['success_rate']:.2f} taux de succ√®s")
    print(f"  Error Monitor: {em.get_error_summary()['total_events']} √©v√©nements")


async def main():
    """Fonction principale de d√©monstration"""
    print("üéØ === D√âMONSTRATION SYST√àME DE R√âSILIENCE MANALYTICS ===")
    print("Ce script d√©montre les capacit√©s du syst√®me de r√©silience int√©gr√©.")
    
    try:
        await demo_circuit_breaker()
        await demo_retry_handler()
        await demo_error_monitor()
        await demo_resilient_decorator()
        await demo_integration()
        
        print("\nüéâ === D√âMONSTRATION TERMIN√âE ===")
        print("Le syst√®me de r√©silience est op√©rationnel et pr√™t pour la production !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur dans la d√©monstration: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 