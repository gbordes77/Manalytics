#!/usr/bin/env python3
"""
Script d'activation de la politique NO MOCK DATA
Configure automatiquement le projet pour rejeter toute donn√©e mock√©e
"""

import os
import sys
import subprocess
from pathlib import Path

def main():
    """Active la politique NO MOCK DATA"""
    
    print("üöÄ ACTIVATION POLITIQUE NO MOCK DATA")
    print("=" * 50)
    
    # 1. Configurer les variables d'environnement
    print("‚öôÔ∏è  Configuration des variables d'environnement...")
    
    env_vars = {
        'NO_MOCK_DATA': 'true',
        'REJECT_MOCK_DATA': 'true',
        'REQUIRE_REAL_SOURCES': 'true',
        'PYTHONPATH': f"{os.getcwd()}:{os.environ.get('PYTHONPATH', '')}"
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"  ‚úÖ {key}={value}")
    
    # 2. Cr√©er les dossiers n√©cessaires
    print("\nüìÅ Cr√©ation des dossiers...")
    
    required_dirs = [
        'config',
        'scripts', 
        'enforcement',
        '.github/workflows'
    ]
    
    for dir_path in required_dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {dir_path}/")
    
    # 3. V√©rifier que les fichiers de politique existent
    print("\nüìã V√©rification des fichiers de politique...")
    
    required_files = [
        'config/no_mock_policy.py',
        'enforcement/strict_mode.py',
        'scripts/check_no_mocks.py',
        '.git/hooks/pre-commit',
        '.github/workflows/no-mock-validation.yml',
        'tests/conftest.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} (manquant)")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå {len(missing_files)} fichier(s) manquant(s)")
        print("üîß Ex√©cuter d'abord la cr√©ation des fichiers de politique")
        return False
    
    # 4. Rendre les scripts ex√©cutables
    print("\nüîß Configuration des permissions...")
    
    executable_files = [
        'scripts/check_no_mocks.py',
        '.git/hooks/pre-commit'
    ]
    
    for file_path in executable_files:
        try:
            os.chmod(file_path, 0o755)
            print(f"  ‚úÖ {file_path} rendu ex√©cutable")
        except Exception as e:
            print(f"  ‚ùå Erreur avec {file_path}: {e}")
    
    # 5. Tester la validation
    print("\nüß™ Test de validation...")
    
    try:
        # Importer et tester le module de politique
        sys.path.insert(0, str(Path.cwd()))
        from config.no_mock_policy import enforce_real_data_only, Settings
        
        # Activer le mode strict
        enforce_real_data_only()
        print("  ‚úÖ Mode strict activ√©")
        
        # Valider l'environnement
        Settings.validate_environment()
        print("  ‚úÖ Environnement valid√©")
        
    except Exception as e:
        print(f"  ‚ùå Erreur de validation: {e}")
        return False
    
    # 6. Tester le script de v√©rification
    print("\nüîç Test du script de v√©rification...")
    
    try:
        result = subprocess.run([
            'python', 'scripts/check_no_mocks.py', 'config/no_mock_policy.py'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  ‚úÖ Script de v√©rification fonctionne")
        else:
            print(f"  ‚ùå Erreur dans le script: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Impossible de tester le script: {e}")
        return False
    
    # 7. Configurer Git
    print("\nüìù Configuration Git...")
    
    try:
        # Configurer Git pour utiliser le hook
        subprocess.run(['git', 'config', 'core.hooksPath', '.git/hooks'], check=True)
        print("  ‚úÖ Hooks Git configur√©s")
        
        # Ajouter la configuration au .gitignore si n√©cessaire
        gitignore_path = Path('.gitignore')
        if gitignore_path.exists():
            with open(gitignore_path, 'r') as f:
                content = f.read()
            
            if 'mock_data' not in content:
                with open(gitignore_path, 'a') as f:
                    f.write('\n# Mock data (interdit)\n')
                    f.write('*mock*\n')
                    f.write('*fake*\n')
                    f.write('*dummy*\n')
                    f.write('test_data/\n')
                print("  ‚úÖ .gitignore mis √† jour")
        
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Configuration Git: {e}")
    
    # 8. Afficher le r√©sum√©
    print("\n" + "=" * 50)
    print("‚úÖ POLITIQUE NO MOCK DATA ACTIV√âE")
    print("=" * 50)
    
    print("\nüìã R√àGLES ACTIV√âES:")
    print("  ‚ùå Aucune donn√©e mock√©e autoris√©e")
    print("  ‚ùå Imports de mock interdits")
    print("  ‚ùå Patterns test/fake/dummy interdits")
    print("  ‚úÖ Seules les donn√©es r√©elles accept√©es")
    
    print("\nüîß ENFORCEMENT ACTIV√â:")
    print("  ‚úÖ Git hook pre-commit")
    print("  ‚úÖ CI/CD GitHub Actions")
    print("  ‚úÖ Validation pytest")
    print("  ‚úÖ Mode strict Python")
    
    print("\nüìä SOURCES DE DONN√âES AUTORIS√âES:")
    print("  ‚úÖ MTGODecklistCache/Tournaments/")
    print("  ‚úÖ data/raw/ (donn√©es scrap√©es)")
    print("  ‚úÖ API Scryfall")
    print("  ‚úÖ Scraping Melee.gg/MTGO")
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("  1. Tester un commit : git add . && git commit -m 'test'")
    print("  2. Lancer les tests : pytest tests/")
    print("  3. V√©rifier le codebase : python scripts/check_no_mocks.py")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 