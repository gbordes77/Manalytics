#!/usr/bin/env python3
"""
Script principal pour g√©n√©rer toutes les visualisations Manalytics
Utilise exclusivement les vraies donn√©es de tournois
"""

import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.append('src')

from python.visualizations.matchup_matrix import MatchupMatrixGenerator
from python.visualizations.metagame_charts import MetagameChartsGenerator

def setup_logging():
    """Configure le logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def main():
    """G√©n√®re toutes les visualisations"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ D√©marrage de la g√©n√©ration compl√®te des visualisations Manalytics")
    
    # Cr√©er le r√©pertoire de sortie
    output_dir = Path("analysis_output")
    output_dir.mkdir(exist_ok=True)
    
    try:
        # 1. G√©n√©rer la matrice de matchups
        logger.info("üìä G√©n√©ration de la matrice de matchups...")
        matrix_generator = MatchupMatrixGenerator()
        matrix_report = matrix_generator.generate_full_report(str(output_dir))
        
        logger.info(f"‚úÖ Matrice de matchups g√©n√©r√©e:")
        logger.info(f"   - Arch√©types: {matrix_report['metadata']['archetypes_count']}")
        logger.info(f"   - Tournois: {matrix_report['metadata']['total_tournaments']}")
        logger.info(f"   - Joueurs: {matrix_report['metadata']['total_players']}")
        
        # 2. G√©n√©rer tous les graphiques de m√©tagame
        logger.info("üìà G√©n√©ration de tous les graphiques de m√©tagame...")
        metagame_generator = MetagameChartsGenerator()
        metagame_report = metagame_generator.generate_all_charts(str(output_dir))
        
        logger.info(f"‚úÖ Graphiques de m√©tagame g√©n√©r√©s:")
        for chart_name in metagame_report['charts'].keys():
            logger.info(f"   - {chart_name}")
        
        # 3. R√©sum√© complet
        all_files = []
        all_files.extend(matrix_report['files'].values())
        all_files.extend(metagame_report['files'].values())
        
        logger.info("üéØ G√©n√©ration termin√©e avec succ√®s!")
        logger.info(f"üìÅ R√©pertoire de sortie: {output_dir.absolute()}")
        logger.info("üìä Visualisations g√©n√©r√©es:")
        logger.info("   ‚Ä¢ Matrice de matchups (heatmap interactive)")
        logger.info("   ‚Ä¢ Part de m√©tagame des arch√©types (bar chart horizontal)")
        logger.info("   ‚Ä¢ Winrates avec intervalles de confiance (scatter + barres d'erreur)")
        logger.info("   ‚Ä¢ Classification par tiers (scatter plot)")
        logger.info("   ‚Ä¢ Winrate vs pr√©sence (bubble chart)")
        logger.info("   ‚Ä¢ Top arch√©types performants (bar chart)")
        
        logger.info("üíæ Exports de donn√©es:")
        logger.info("   ‚Ä¢ CSV et JSON pour tous les graphiques")
        logger.info("   ‚Ä¢ Statistiques d√©taill√©es par arch√©type")
        logger.info("   ‚Ä¢ Donn√©es des top performers")
        
        logger.info("üé® Caract√©ristiques:")
        logger.info("   ‚Ä¢ Palette heatmap violet‚Üívert")
        logger.info("   ‚Ä¢ Intervalles de confiance 95% (m√©thode Wilson)")
        logger.info("   ‚Ä¢ Tooltips interactifs")
        logger.info("   ‚Ä¢ Donn√©es 100% r√©elles de tournois")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 