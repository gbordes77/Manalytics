#!/usr/bin/env python3
"""
Tests de r√©gression pour le pipeline Manalytics
Tests sur les vraies donn√©es uniquement
"""

import os
import sys
import json
import hashlib
from pathlib import Path
from datetime import datetime

def test_pipeline_structure_stability():
    """V√©rifie la stabilit√© de la structure du pipeline"""
    print("üß™ Testing pipeline structure stability...")
    
    # Fichiers critiques du pipeline
    critical_files = [
        'fetch_tournament.py',
        'data_treatment.py',
        'step3_visualization.py',
        'orchestrator.py'
    ]
    
    missing_files = []
    for file in critical_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Critical files missing: {missing_files}")
        return False
    
    print("‚úÖ Pipeline structure stable")
    return True

def test_mtgo_format_data_integrity():
    """V√©rifie l'int√©grit√© des donn√©es MTGOFormatData"""
    print("üß™ Testing MTGOFormatData integrity...")
    
    if not os.path.exists('MTGOFormatData/'):
        print("‚ö†Ô∏è  MTGOFormatData not found - integrity test skipped")
        return True
    
    # V√©rifier les formats critiques
    formats = ['Modern', 'Legacy', 'Pioneer', 'Standard']
    
    for format_name in formats:
        format_path = Path('MTGOFormatData/Formats') / format_name
        if format_path.exists():
            # V√©rifier les fichiers critiques
            critical_files = ['metas.json', 'color_overrides.json']
            for file in critical_files:
                file_path = format_path / file
                if file_path.exists():
                    try:
                        with open(file_path) as f:
                            json.load(f)
                    except json.JSONDecodeError:
                        print(f"‚ùå Invalid JSON in {format_name}/{file}")
                        return False
        else:
            print(f"‚ö†Ô∏è  Format {format_name} not found")
    
    print("‚úÖ MTGOFormatData integrity verified")
    return True

def test_api_configuration_stability():
    """V√©rifie la stabilit√© de la configuration API"""
    print("üß™ Testing API configuration stability...")
    
    if not os.path.exists('Api_token_and_login/'):
        print("‚ö†Ô∏è  API configuration not found - stability test skipped")
        return True
    
    # V√©rifier les fichiers de configuration
    config_files = list(Path('Api_token_and_login/').glob('*'))
    if config_files:
        print(f"‚úÖ API configuration files found: {len(config_files)}")
    else:
        print("‚ö†Ô∏è  No API configuration files found")
    
    return True

def test_real_data_consistency():
    """V√©rifie la coh√©rence des vraies donn√©es"""
    print("üß™ Testing real data consistency...")
    
    # V√©rifier les donn√©es r√©elles
    real_data_paths = [
        'data/processed/',
        'data/raw/',
        'MTGODecklistCache/Tournaments/'
    ]
    
    consistent_data = True
    for path in real_data_paths:
        if os.path.exists(path):
            json_files = list(Path(path).glob('**/*.json'))
            if json_files:
                # Tester quelques fichiers
                for file_path in json_files[:5]:  # Limiter √† 5 fichiers
                    try:
                        with open(file_path) as f:
                            data = json.load(f)
                        # V√©rification basique de structure
                        if not isinstance(data, dict):
                            print(f"‚ùå Invalid structure in {file_path.name}")
                            consistent_data = False
                    except json.JSONDecodeError:
                        print(f"‚ùå Invalid JSON in {file_path.name}")
                        consistent_data = False
                
                print(f"‚úÖ {path}: {len(json_files)} files checked")
            else:
                print(f"‚ö†Ô∏è  {path}: No JSON files found")
        else:
            print(f"‚ö†Ô∏è  {path}: Directory not found")
    
    if consistent_data:
        print("‚úÖ Real data consistency verified")
    
    return consistent_data

def test_output_format_regression():
    """V√©rifie la r√©gression du format de sortie"""
    print("üß™ Testing output format regression...")
    
    # V√©rifier les sorties existantes
    output_paths = [
        'data/output/',
        'results/'
    ]
    
    format_stable = True
    for path in output_paths:
        if os.path.exists(path):
            json_files = list(Path(path).glob('**/*.json'))
            if json_files:
                for file_path in json_files:
                    try:
                        with open(file_path) as f:
                            data = json.load(f)
                        print(f"‚úÖ Valid output format: {file_path.name}")
                    except json.JSONDecodeError:
                        print(f"‚ùå Invalid JSON format: {file_path.name}")
                        format_stable = False
            else:
                print(f"‚ö†Ô∏è  {path}: No output files found")
        else:
            print(f"‚ö†Ô∏è  {path}: Directory not found")
    
    if format_stable:
        print("‚úÖ Output format regression test passed")
    
    return format_stable

def test_dependency_stability():
    """V√©rifie la stabilit√© des d√©pendances"""
    print("üß™ Testing dependency stability...")
    
    # V√©rifier requirements.txt
    if os.path.exists('requirements.txt'):
        try:
            with open('requirements.txt') as f:
                requirements = f.read().strip().split('\n')
            
            # V√©rifier les d√©pendances critiques
            critical_deps = ['pandas', 'numpy', 'matplotlib', 'seaborn']
            missing_deps = []
            
            for dep in critical_deps:
                if not any(dep in req for req in requirements):
                    missing_deps.append(dep)
            
            if missing_deps:
                print(f"‚ùå Missing critical dependencies: {missing_deps}")
                return False
            
            print(f"‚úÖ Dependencies stable: {len(requirements)} packages")
            
        except Exception as e:
            print(f"‚ùå Error reading requirements.txt: {e}")
            return False
    else:
        print("‚ö†Ô∏è  requirements.txt not found")
    
    return True

def test_configuration_regression():
    """V√©rifie la r√©gression de configuration"""
    print("üß™ Testing configuration regression...")
    
    # V√©rifier config.yaml
    if os.path.exists('config.yaml'):
        try:
            import yaml
            with open('config.yaml') as f:
                config = yaml.safe_load(f)
            print("‚úÖ Configuration YAML valid")
        except Exception as e:
            print(f"‚ùå Configuration YAML invalid: {e}")
            return False
    else:
        print("‚ö†Ô∏è  config.yaml not found")
    
    return True

def test_file_permissions():
    """V√©rifie les permissions des fichiers"""
    print("üß™ Testing file permissions...")
    
    # V√©rifier les permissions des scripts principaux
    scripts = ['fetch_tournament.py', 'data_treatment.py', 'step3_visualization.py']
    
    for script in scripts:
        if os.path.exists(script):
            # V√©rifier que le fichier est lisible
            if os.access(script, os.R_OK):
                print(f"‚úÖ {script}: readable")
            else:
                print(f"‚ùå {script}: not readable")
                return False
        else:
            print(f"‚ö†Ô∏è  {script}: not found")
    
    return True

def run_all_regression_tests():
    """Ex√©cute tous les tests de r√©gression"""
    print("üöÄ Running Regression Tests...")
    print("=" * 50)
    
    tests = [
        test_pipeline_structure_stability,
        test_mtgo_format_data_integrity,
        test_api_configuration_stability,
        test_real_data_consistency,
        test_output_format_regression,
        test_dependency_stability,
        test_configuration_regression,
        test_file_permissions
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
            print()
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            results.append(False)
            print()
    
    # R√©sum√©
    passed = sum(results)
    total = len(results)
    
    print("=" * 50)
    print(f"üìä Regression Tests Results: {passed}/{total} passed")
    
    if passed == total:
        print("‚úÖ All regression tests passed!")
        return True
    else:
        print("‚ùå Some regression tests failed")
        return False

if __name__ == "__main__":
    success = run_all_regression_tests()
    sys.exit(0 if success else 1) 