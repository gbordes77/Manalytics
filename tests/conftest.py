"""
Configuration pytest pour forcer donn√©es r√©elles dans les tests
AUCUNE donn√©e mock√©e autoris√©e
"""

import pytest
import json
import os
import sys
from pathlib import Path
from typing import Dict, List

# Ajouter le r√©pertoire racine au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.no_mock_policy import (
    NoMockDataError, 
    RealDataEnforcer, 
    Settings, 
    get_real_tournament_data,
    enforce_real_data_only
)

# Activer le mode strict d√®s le d√©but
enforce_real_data_only()

@pytest.fixture(scope='session', autouse=True)
def enforce_no_mock_data():
    """Fixture automatique qui interdit tout mock"""
    
    # D√©sactiver unittest.mock
    try:
        import unittest.mock
        unittest.mock.Mock = None
        unittest.mock.MagicMock = None
        unittest.mock.patch = None
        unittest.mock.mock_open = None
    except ImportError:
        pass
    
    # D√©sactiver pytest-mock
    try:
        import pytest_mock
        pytest_mock.MockFixture = None
        pytest_mock.mocker = None
    except ImportError:
        pass
    
    # D√©sactiver responses
    try:
        import responses
        responses.mock = None
        responses.RequestsMock = None
    except ImportError:
        pass
    
    print("‚úÖ Mode strict activ√© - Aucun mock autoris√©")
    yield
    
    # Pas de restauration - on garde le mode strict

@pytest.fixture(scope='session')
def real_tournament_data() -> List[Dict]:
    """Fournit de VRAIES donn√©es de tournoi pour les tests"""
    try:
        tournaments = get_real_tournament_data()
        print(f"‚úÖ {len(tournaments)} tournois r√©els charg√©s pour les tests")
        return tournaments
    except Exception as e:
        pytest.skip(f"‚ùå Impossible de charger les donn√©es r√©elles: {e}")

@pytest.fixture
def real_tournament(real_tournament_data) -> Dict:
    """Fournit un seul tournoi r√©el pour les tests"""
    if not real_tournament_data:
        pytest.skip("‚ùå Aucun tournoi r√©el disponible")
    return real_tournament_data[0]

@pytest.fixture
def real_deck(real_tournament) -> Dict:
    """Fournit un deck r√©el pour les tests"""
    decks = real_tournament.get('decks', [])
    if not decks:
        pytest.skip("‚ùå Aucun deck r√©el disponible")
    return decks[0]

@pytest.fixture
def real_decklist(real_deck) -> List[Dict]:
    """Fournit une decklist r√©elle pour les tests"""
    mainboard = real_deck.get('mainboard', [])
    if not mainboard:
        pytest.skip("‚ùå Aucune decklist r√©elle disponible")
    return mainboard

@pytest.fixture
def multiple_real_tournaments(real_tournament_data) -> List[Dict]:
    """Fournit plusieurs tournois r√©els pour les tests"""
    if len(real_tournament_data) < 3:
        pytest.skip("‚ùå Pas assez de tournois r√©els (minimum 3)")
    return real_tournament_data[:10]  # Limiter √† 10 pour les performances

@pytest.fixture
def real_mtgo_tournament(real_tournament_data) -> Dict:
    """Fournit un tournoi MTGO r√©el"""
    mtgo_tournaments = [
        t for t in real_tournament_data 
        if 'mtgo' in str(t.get('source', '')).lower()
    ]
    if not mtgo_tournaments:
        pytest.skip("‚ùå Aucun tournoi MTGO r√©el disponible")
    return mtgo_tournaments[0]

@pytest.fixture
def real_melee_tournament(real_tournament_data) -> Dict:
    """Fournit un tournoi Melee r√©el"""
    melee_tournaments = [
        t for t in real_tournament_data 
        if 'melee' in str(t.get('source', '')).lower()
    ]
    if not melee_tournaments:
        pytest.skip("‚ùå Aucun tournoi Melee r√©el disponible")
    return melee_tournaments[0]

@pytest.fixture
def real_standard_data(real_tournament_data) -> List[Dict]:
    """Fournit des donn√©es Standard r√©elles"""
    standard_tournaments = [
        t for t in real_tournament_data 
        if str(t.get('format', '')).lower() == 'standard'
    ]
    if not standard_tournaments:
        pytest.skip("‚ùå Aucun tournoi Standard r√©el disponible")
    return standard_tournaments

@pytest.fixture
def real_modern_data(real_tournament_data) -> List[Dict]:
    """Fournit des donn√©es Modern r√©elles"""
    modern_tournaments = [
        t for t in real_tournament_data 
        if str(t.get('format', '')).lower() == 'modern'
    ]
    if not modern_tournaments:
        pytest.skip("‚ùå Aucun tournoi Modern r√©el disponible")
    return modern_tournaments

@pytest.fixture
def validate_real_data():
    """Fixture pour valider que les donn√©es sont r√©elles"""
    def _validate(data):
        try:
            RealDataEnforcer.validate_no_mock_data(data)
            return True
        except NoMockDataError as e:
            pytest.fail(f"‚ùå Donn√©es mock√©es d√©tect√©es: {e}")
    
    return _validate

# Hook pytest pour valider chaque test
def pytest_runtest_setup(item):
    """Valide avant chaque test qu'aucun mock n'est utilis√©"""
    
    # V√©rifier les marqueurs de test
    if hasattr(item, 'pytestmark'):
        for mark in item.pytestmark:
            if mark.name in ['mock', 'patch', 'monkeypatch']:
                pytest.fail(
                    f"‚ùå Test {item.name} utilise des mocks interdits\n"
                    f"üìã R√®gle: Utiliser uniquement des donn√©es r√©elles\n"
                    f"üîß Utiliser les fixtures real_tournament_data, real_deck, etc."
                )

# Configuration pytest globale
def pytest_configure(config):
    """Configuration globale pytest"""
    
    # Marquer les tests qui utilisent des mocks comme xfail
    config.addinivalue_line(
        "markers", 
        "mock: mark test as using mocks (will fail)"
    )
    
    # V√©rifier que les donn√©es r√©elles sont disponibles
    try:
        Settings.validate_environment()
        print("‚úÖ Environnement valid√© pour les donn√©es r√©elles")
    except RuntimeError as e:
        print(f"‚ùå {e}")
        pytest.exit("Configuration invalide - Donn√©es r√©elles requises")

# Rapport de fin
def pytest_sessionfinish(session, exitstatus):
    """Rapport final de la session de tests"""
    
    if exitstatus == 0:
        print("\n‚úÖ TOUS LES TESTS VALID√âS AVEC DONN√âES R√âELLES")
        print("üìä Aucune donn√©e mock√©e utilis√©e")
    else:
        print("\n‚ùå Certains tests ont √©chou√©")
        print("üìã V√©rifier que seules des donn√©es r√©elles sont utilis√©es")

# Exemple d'utilisation dans les tests :
"""
def test_tournament_classification(real_tournament, validate_real_data):
    # Valider que les donn√©es sont r√©elles
    validate_real_data(real_tournament)
    
    # Utiliser le tournoi r√©el
    assert real_tournament['decks']
    assert len(real_tournament['decks']) >= 8
    
    # Pas de mock - utiliser les vraies donn√©es
    for deck in real_tournament['decks']:
        assert deck['mainboard']
        assert len(deck['mainboard']) >= 60

def test_archetype_detection(real_deck, validate_real_data):
    # Valider que le deck est r√©el
    validate_real_data(real_deck)
    
    # Tester avec de vraies donn√©es
    classifier = ArchetypeClassifier()
    archetype = classifier.classify(real_deck)
    
    # V√©rifier que l'arch√©type n'est pas mock√©
    validate_real_data(archetype)
    assert archetype != "TestArchetype"
""" 