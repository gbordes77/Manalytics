#!/usr/bin/env python3
"""
V√©rification de la classification des tournois
Analyse si des Leagues ont √©t√© mal class√©es dans les Challenges
"""

import json
from collections import defaultdict
from pathlib import Path


def analyze_tournament_classification():
    """Analyse la classification des tournois MTGO"""

    # Charger les donn√©es MTGO
    mtgo_file = Path("data/processed/mtgo_standard_july_2025.json")
    with open(mtgo_file, "r", encoding="utf-8") as f:
        mtgo_data = json.load(f)

    print("üîç ANALYSE DE LA CLASSIFICATION DES TOURNOIS")
    print("=" * 60)

    # Analyser tous les noms de tournois
    all_tournaments = []
    leagues = []
    challenges = []
    autres = []

    for tournament_entry in mtgo_data:
        tournament = tournament_entry.get("tournament", {})
        name = tournament.get("Name", "")
        uri = tournament.get("Uri", "")
        date = tournament.get("Date", "")
        deck_count = len(tournament_entry.get("decks", []))
        decks = tournament_entry.get("decks", [])

        tournament_info = {
            "name": name,
            "uri": uri,
            "date": date,
            "deck_count": deck_count,
            "decks": decks,
        }

        all_tournaments.append(tournament_info)

        # Classification actuelle
        if "League" in name:
            leagues.append(tournament_info)
        elif "Challenge" in name:
            challenges.append(tournament_info)
        else:
            autres.append(tournament_info)

    print(f"üìä TOTAUX :")
    print(f"   ‚Ä¢ Total tournois : {len(all_tournaments)}")
    print(f"   ‚Ä¢ Leagues : {len(leagues)}")
    print(f"   ‚Ä¢ Challenges : {len(challenges)}")
    print(f"   ‚Ä¢ Autres : {len(autres)}")
    print()

    # Analyser les noms de tournois par cat√©gorie
    print("üèÖ LEAGUES D√âTECT√âES :")
    for league in leagues:
        has_5_0 = any(deck.get("Result") == "5-0" for deck in league["decks"])
        print(
            f"   ‚Ä¢ {league['name']} ({league['date']}) - {league['deck_count']} decks - 5-0: {'Oui' if has_5_0 else 'Non'}"
        )
    print()

    print("‚öîÔ∏è CHALLENGES D√âTECT√âES :")
    suspicious_challenges = []
    for challenge in challenges:
        print(
            f"   ‚Ä¢ {challenge['name']} ({challenge['date']}) - {challenge['deck_count']} decks"
        )

        # V√©rifier si c'est suspect (contient League dans le nom)
        if "League" in challenge["name"]:
            suspicious_challenges.append(challenge)
    print()

    print("üé≤ AUTRES TOURNOIS :")
    for autre in autres:
        print(f"   ‚Ä¢ {autre['name']} ({autre['date']}) - {autre['deck_count']} decks")
    print()

    # Alertes
    if suspicious_challenges:
        print("‚ö†Ô∏è ALERTES - CHALLENGES SUSPECTS (contiennent 'League') :")
        for suspect in suspicious_challenges:
            print(f"   üö® {suspect['name']} - Peut-√™tre mal classifi√© ?")
        print()

    # Analyser les patterns de noms
    print("üìã ANALYSE DES PATTERNS DE NOMS :")
    name_patterns = defaultdict(int)
    for tournament in all_tournaments:
        # Extraire le type principal (premier mot)
        words = tournament["name"].split()
        if words:
            pattern = words[0]
            name_patterns[pattern] += 1

    for pattern, count in sorted(
        name_patterns.items(), key=lambda x: x[1], reverse=True
    ):
        print(f"   ‚Ä¢ {pattern}: {count} tournois")
    print()

    # V√©rifier la coh√©rence des r√©sultats
    print("üéØ ANALYSE DES R√âSULTATS :")
    for tournament in all_tournaments:
        results = [deck.get("Result", "") for deck in tournament["decks"]]
        unique_results = set(results)

        if "League" in tournament["name"]:
            # Les Leagues devraient avoir principalement des 5-0, 4-1, 3-2
            league_results = ["5-0", "4-1", "3-2", "2-3", "1-4", "0-5"]
            non_league_results = [
                r for r in unique_results if r not in league_results and r != ""
            ]
            if non_league_results:
                print(
                    f"   ‚ö†Ô∏è League avec r√©sultats non-standards : {tournament['name']}"
                )
                print(f"      R√©sultats inattendus : {non_league_results}")

        elif "Challenge" in tournament["name"]:
            # Les Challenges devraient avoir des positions (1st Place, 2nd Place, etc.)
            place_results = [r for r in unique_results if "Place" in r]
            if not place_results and unique_results:
                print(
                    f"   ‚ö†Ô∏è Challenge sans r√©sultats de placement : {tournament['name']}"
                )
                print(f"      R√©sultats : {list(unique_results)[:5]}...")

    return leagues, challenges, autres, suspicious_challenges


def main():
    """Fonction principale"""
    try:
        leagues, challenges, autres, suspicious = analyze_tournament_classification()

        if suspicious:
            print("\nüîÑ RECOMMANDATIONS :")
            print("   ‚Ä¢ V√©rifier la logique de classification")
            print("   ‚Ä¢ Certains tournois peuvent √™tre mal cat√©goris√©s")
            print("   ‚Ä¢ Revoir les crit√®res de distinction League/Challenge")
        else:
            print("\n‚úÖ CLASSIFICATION SEMBLE CORRECTE")
            print("   ‚Ä¢ Aucun tournoi suspect d√©tect√©")

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse : {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
