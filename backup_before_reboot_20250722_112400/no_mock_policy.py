"""
POLITIQUE STRICTE : AUCUNE DONN√âE MOCK√âE
Toutes les donn√©es DOIVENT provenir de sources r√©elles
"""

import json
import os
import re
import sys
from functools import wraps
from pathlib import Path
from typing import Any, Callable, Dict, List


class NoMockDataError(Exception):
    """Erreur lev√©e quand des donn√©es mock√©es sont d√©tect√©es"""

    pass


class RealDataEnforcer:
    """Enforce l'utilisation exclusive de donn√©es r√©elles"""

    # Mots-cl√©s interdits qui indiquent des donn√©es mock√©es
    FORBIDDEN_KEYWORDS = [
        "mock",
        "fake",
        "dummy",
        "test",
        "sample",
        "example",
        "lorem",
        "ipsum",
        "foo",
        "bar",
        "baz",
        "placeholder",
    ]

    # Mots-cl√©s autoris√©s (cartes Magic l√©gitimes)
    ALLOWED_KEYWORDS = [
        "mockingbird",
        "mockery",
        "mocking",  # Cartes Magic avec "mock"
        "test",
        "testing",
        "tester",  # Permis dans certains contextes
    ]

    # Patterns de donn√©es mock√©es typiques
    MOCK_PATTERNS = [
        r"test_\w+",
        r"Test\w+",
        r"example_\w+",
        r"Player\d+",  # Player1, Player2...
        r"Deck\d+",  # Deck1, Deck2...
        r"tournament_12345",  # IDs g√©n√©riques
        r"Card\d+",  # Card1, Card2...
        r"Archetype\d+",  # Archetype1, Archetype2...
    ]

    @staticmethod
    def validate_no_mock_data(data: Any) -> None:
        """Valide qu'aucune donn√©e mock√©e n'est pr√©sente"""
        data_str = str(data).lower()

        # V√©rifier mots-cl√©s interdits (en excluant les autoris√©s)
        for keyword in RealDataEnforcer.FORBIDDEN_KEYWORDS:
            if keyword in data_str:
                # V√©rifier si c'est un mot-cl√© autoris√©
                is_allowed = False
                for allowed in RealDataEnforcer.ALLOWED_KEYWORDS:
                    if allowed in data_str:
                        is_allowed = True
                        break

                if not is_allowed:
                    raise NoMockDataError(
                        f"‚ùå DONN√âES MOCK√âES D√âTECT√âES! Mot-cl√© interdit: '{keyword}'\n"
                        f"üìã R√®gle: TOUTES les donn√©es doivent √™tre R√âELLES (scraping/API)\n"
                        f"üîß Action: Remplacer par des donn√©es r√©elles depuis MTGODecklistCache"
                    )

        # V√©rifier patterns suspects
        for pattern in RealDataEnforcer.MOCK_PATTERNS:
            if re.search(pattern, str(data), re.IGNORECASE):
                raise NoMockDataError(
                    f"‚ùå PATTERN MOCK√â D√âTECT√â: {pattern}\n"
                    f"üìã Donn√©es suspectes: {str(data)[:100]}...\n"
                    f"üîß Action: Utiliser de vraies donn√©es de tournois"
                )

    @staticmethod
    def require_real_data(func: Callable) -> Callable:
        """D√©corateur qui force l'utilisation de donn√©es r√©elles"""

        @wraps(func)
        def wrapper(*args, **kwargs):
            # V√©rifier tous les arguments
            for arg in args:
                RealDataEnforcer.validate_no_mock_data(arg)
            for key, value in kwargs.items():
                RealDataEnforcer.validate_no_mock_data(value)

            # Ex√©cuter la fonction
            result = func(*args, **kwargs)

            # V√©rifier le r√©sultat
            if result is not None:
                RealDataEnforcer.validate_no_mock_data(result)

            return result

        return wrapper

    @staticmethod
    def validate_tournament_data(tournament: Dict) -> bool:
        """Valide qu'un tournoi est r√©el et non mock√©"""
        # V√©rifier l'ID du tournoi
        if not tournament.get("id"):
            raise NoMockDataError("‚ùå Tournament sans ID r√©el")

        # Pattern d'ID r√©el MTGO/Melee
        mtgo_pattern = r"(modern|legacy|vintage|pioneer|standard)-(challenge|preliminary|showcase)-\d{4}-\d{2}-\d{2}"
        melee_pattern = r"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"

        tournament_id = str(tournament["id"])

        if not (
            re.match(mtgo_pattern, tournament_id, re.IGNORECASE)
            or re.match(melee_pattern, tournament_id)
        ):
            raise NoMockDataError(
                f"‚ùå ID de tournoi invalide: {tournament_id}\n"
                f"üìã Doit matcher un vrai pattern MTGO/Melee\n"
                f"üîß Utiliser des donn√©es de MTGODecklistCache"
            )

        # V√©rifier les decks
        decks = tournament.get("decks", [])
        if len(decks) < 8:
            raise NoMockDataError(
                f"‚ùå Tournoi avec {len(decks)} decks (minimum 8 pour √™tre r√©aliste)"
            )

        # Valider chaque deck
        for deck in decks:
            RealDataEnforcer.validate_decklist(deck)

        return True

    @staticmethod
    def validate_decklist(deck: Dict) -> bool:
        """Valide qu'une decklist est r√©elle"""
        mainboard = deck.get("mainboard", [])

        # V√©rifier taille r√©aliste
        total_cards = sum(card.get("count", 0) for card in mainboard)
        if total_cards < 60:
            raise NoMockDataError(
                f"‚ùå Deck avec {total_cards} cartes (minimum 60)\n"
                f"üîß Utiliser des decklists r√©elles compl√®tes"
            )

        # V√©rifier noms de cartes r√©els (pas Card1, Card2...)
        for card in mainboard:
            card_name = card.get("name", "")
            if re.match(r"Card\d+", card_name):
                raise NoMockDataError(
                    f"‚ùå Nom de carte mock√© d√©tect√©: {card_name}\n"
                    f"üîß Utiliser de vrais noms de cartes Magic"
                )

            # V√©rifier que le nom n'est pas g√©n√©rique
            if card_name.lower() in ["test card", "example card", "mock card"]:
                raise NoMockDataError(
                    f"‚ùå Nom de carte g√©n√©rique: {card_name}\n"
                    f"üîß Utiliser de vraies cartes Magic"
                )

        return True


class Settings:
    """Configuration globale : donn√©es r√©elles uniquement"""

    # Mode strict activ√© par d√©faut
    ENFORCE_REAL_DATA = True
    NO_MOCK_DATA = True
    NO_TEST_DATA = True

    # Sources de donn√©es autoris√©es
    ALLOWED_DATA_SOURCES = [
        "https://www.mtgo.com/decklists",
        "https://melee.gg",
        "https://topdeck.gg",
        "https://api.scryfall.com",
        "./MTGODecklistCache/Tournaments/",  # Cache local de vrais tournois
        "./data/raw/",  # Donn√©es scrap√©es
    ]

    # Validation obligatoire
    VALIDATE_ALL_DATA = True
    MINIMUM_REAL_TOURNAMENTS = 10  # Au moins 10 vrais tournois
    MINIMUM_REAL_DECKS = 100  # Au moins 100 vrais decks

    # Chemins de donn√©es r√©elles
    REAL_DATA_PATHS = [
        Path("./MTGODecklistCache/Tournaments/"),
        Path("./data/raw/"),
        Path("./data/processed/"),
    ]

    @staticmethod
    def validate_environment():
        """Valide que l'environnement est configur√© pour les donn√©es r√©elles"""
        # V√©rifier variable d'environnement
        if not os.getenv("NO_MOCK_DATA"):
            raise RuntimeError(
                "‚ùå Variable d'environnement manquante!\n"
                "üîß Ex√©cuter: export NO_MOCK_DATA=true"
            )

        # V√©rifier disponibilit√© des donn√©es r√©elles
        real_data_available = False
        for path in Settings.REAL_DATA_PATHS:
            if path.exists() and list(path.rglob("*.json")):
                real_data_available = True
                break

        if not real_data_available:
            raise RuntimeError(
                "‚ùå ERREUR: Aucune donn√©e r√©elle disponible!\n"
                "üìã Action requise:\n"
                "1. git clone https://github.com/Jiliac/MTGODecklistCache\n"
                "2. Ou lancer le scraper sur de vrais tournois\n"
                "3. V√©rifier que ./data/ contient des fichiers JSON r√©els"
            )

        return True


def enforce_real_data_only():
    """Active le mode strict globalement"""

    # Configurer les variables d'environnement
    os.environ["REJECT_MOCK_DATA"] = "true"
    os.environ["REQUIRE_REAL_SOURCES"] = "true"
    os.environ["NO_MOCK_DATA"] = "true"

    # Valider l'environnement
    Settings.validate_environment()

    print("‚úÖ MODE STRICT ACTIV√â: Donn√©es r√©elles uniquement!")
    print("üìã Toute donn√©e mock√©e sera rejet√©e automatiquement")

    return True


def get_real_tournament_data() -> List[Dict]:
    """R√©cup√®re de vraies donn√©es de tournoi pour les tests"""
    real_tournaments = []

    # Chercher dans MTGODecklistCache
    cache_path = Path("./MTGODecklistCache/Tournaments/")
    if cache_path.exists():
        for json_file in cache_path.rglob("*.json"):
            try:
                with open(json_file) as f:
                    tournament = json.load(f)
                    # Valider que c'est bien r√©el
                    RealDataEnforcer.validate_tournament_data(tournament)
                    real_tournaments.append(tournament)
            except (json.JSONDecodeError, NoMockDataError):
                continue

    # Chercher dans data/raw/
    raw_path = Path("./data/raw/")
    if raw_path.exists():
        for json_file in raw_path.rglob("*.json"):
            try:
                with open(json_file) as f:
                    tournament = json.load(f)
                    RealDataEnforcer.validate_tournament_data(tournament)
                    real_tournaments.append(tournament)
            except (json.JSONDecodeError, NoMockDataError):
                continue

    if len(real_tournaments) < Settings.MINIMUM_REAL_TOURNAMENTS:
        raise RuntimeError(
            f"‚ùå Pas assez de tournois r√©els: {len(real_tournaments)}\n"
            f"üìã Minimum requis: {Settings.MINIMUM_REAL_TOURNAMENTS}\n"
            f"üîß Scraper plus de donn√©es ou cloner MTGODecklistCache"
        )

    return real_tournaments


# D√©corateur principal pour les fonctions
def real_data_only(func: Callable) -> Callable:
    """D√©corateur principal qui garantit l'utilisation de donn√©es r√©elles"""
    return RealDataEnforcer.require_real_data(func)


# Validation au niveau module
if __name__ == "__main__":
    try:
        enforce_real_data_only()
        print("‚úÖ Configuration NO MOCK DATA valid√©e")
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        sys.exit(1)
