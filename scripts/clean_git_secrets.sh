#!/bin/bash
# üîí Script de nettoyage des secrets de l'historique Git
# ‚ö†Ô∏è  ATTENTION: Ce script modifie l'historique Git!

echo "üîí Nettoyage des secrets de l'historique Git"
echo "==========================================="
echo ""
echo "‚ö†Ô∏è  AVERTISSEMENT: Ce script va:"
echo "  - Modifier l'historique Git"
echo "  - N√©cessiter un force push"
echo "  - Affecter tous les clones du repo"
echo ""
read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Annul√©"
    exit 1
fi

# Cr√©er un backup avant modification
echo "üì¶ Cr√©ation d'un backup..."
git bundle create ../manalytics-backup-$(date +%Y%m%d-%H%M%S).bundle --all

# Liste des fichiers √† supprimer de l'historique
FILES_TO_REMOVE=(
    "api_credentials/melee_login.json"
    "api_credentials/melee_cookies.json"
    "Api_token_and_login/melee_login.json"
    "melee_login.json"
    "melee_cookies.json"
    "**/*_login.json"
    "**/*_cookies.json"
)

echo ""
echo "üßπ Suppression des fichiers sensibles..."

# Utiliser git filter-branch (plus compatible que BFG)
for file in "${FILES_TO_REMOVE[@]}"; do
    echo "  - Suppression de: $file"
    git filter-branch --force --index-filter \
        "git rm --cached --ignore-unmatch $file" \
        --prune-empty --tag-name-filter cat -- --all 2>/dev/null
done

echo ""
echo "üóëÔ∏è  Nettoyage des refs..."

# Nettoyer les r√©f√©rences
rm -rf .git/refs/original/
git reflog expire --expire=now --all
git gc --prune=now --aggressive

echo ""
echo "‚úÖ Nettoyage termin√©!"
echo ""
echo "üìù Prochaines √©tapes:"
echo "  1. V√©rifier que tout fonctionne: git log --oneline"
echo "  2. Force push: git push --force --all"
echo "  3. Force push tags: git push --force --tags"
echo ""
echo "‚ö†Ô∏è  IMPORTANT:"
echo "  - Tous les collaborateurs devront re-cloner le repo"
echo "  - Les anciennes r√©f√©rences peuvent persister dans les forks"
echo "  - R√©voquez tous les secrets expos√©s imm√©diatement"